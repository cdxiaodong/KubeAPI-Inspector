name: Build and Push Workshop Docker Image

on:
  push:
    tags:
    - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Environment variables available to all jobs and steps in the workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: yeahx/kubeapi-inspector:workshop-apiserver

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    # Grant permissions for actions to push to ghcr.io
    permissions:
      contents: read # Needed to check out the repository
      packages: write # Needed to push Docker images to ghcr.io

    steps:
      - name: Get version
        id: get_version
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Checkout repository
        uses: actions/checkout@v3 # Checks out your repository code

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Use the GitHub Actions token user
          password: ${{ secrets.REGISTRY }} # Use the automatically generated token

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Sets up the buildx builder instance

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta # Assign an ID to refer to the outputs of this step
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} # Full image name
      #     # Generate tags based on the event
      #     tags: |
      #       type=ref,event=pr # Example: Add PR number tag (e.g., pr-123)
      #       type=sha,format=short # Add short git commit SHA as tag (e.g., a1b2c3d)
      #       type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./workshop # IMPORTANT: Set build context to the workshop directory
          file: ./workshop/Dockerfile # IMPORTANT: Specify the Dockerfile path relative to repo root
          push: true # Push the image after building
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ steps.get_version.outputs.VERSION }} # Use tags generated by the metadata step
          # labels: ${{ steps.meta.outputs.labels }} # Add labels generated by the metadata step
          cache-from: type=gha # Enable build cache from GitHub Actions cache
          cache-to: type=gha,mode=max # Write build cache to GitHub Actions cache (mode=max for potentially better performance)